---
title: Scaling
layout: doc-page
weight: 12
description: "It shouldn't be a hassle to deal with success. Now it isn't."
---

Scalability is one of PHP Fog's core customer values. We've built our infrastructure to make it as easy as possible to scale your app up and down to reflect your traffic demands. 

### Why do I need to scale?

Scaling is ultimately about giving your users a good experience, and one of the biggest factors of usability is response time. Generally, as your load goes up, your app's response times get slower, and the user experience suffers. Easy scalability allows you to offer a great user experience regardless of how much traffic you're facing. 

Here's a quote from web usability expert [Jakob Nielsen](http://www.useit.com/jakob/)'s book [Usability Engineering](http://www.amazon.com/exec/obidos/ASIN/0125184069/ref=nosim/useitcomusablein):

> The basic advice regarding response times has been about the same for thirty years [Miller 1968; Card et al. 1991]:
> 
> 0.1 second is about the limit for having the user feel that the system is reacting instantaneously, meaning that no special feedback is necessary except to display the result.
>
> 1.0 second is about the limit for the user's flow of thought to stay uninterrupted, even though the user will notice the delay. Normally, no special feedback is necessary during delays of more than 0.1 but less than 1.0 second, but the user does lose the feeling of operating directly on the data.

User experience isn't the only thing that response time affects, either. [Google announced in 2010](http://googlewebmastercentral.blogspot.com/2010/04/using-site-speed-in-web-search-ranking.html) that site response time affects search engine ranking, too. 

### Before You Scale

Before you even decide if and how much you need to scale, though, you should first optimize the performance of your app. [This article](http://developer.yahoo.com/performance/rules.html) is an excellent starting point for that.

Next you should read our guides on [Caching](/best-practices/caching) and [Storage](/best-practice/storage) to get your app running as fast as possible at any scale, and to prepare your app for scaling. 

### When do I need to scale? 

As mentioned above, 1.0 second is the base threshold you should be shooting for to provide a good user experience, but faster is always better. PHP Fog gives you the tools to decide exactly how fast you want your app to be. 

The first question is: how fast is my app now? You have to know your current response times to decide whether you need to make them faster.

In order to answer that question for PHP Fog users, we've partnered with New Relic, a web app performance monitoring service. We provide deep integration with New Relic on all of our Dedicated Clouds for free. 

New Relic allows you to monitor your app's up-time and response times, as well as your Cloud's system performance stats like CPU load and RAM usage. 

Read more about New Relic [here](/add-ons/newrelic).

### How do I scale? 

PHP Fog lets you choose between scaling up and scaling out. Scaling up means upgrading your existing server(s) to more powerful virtual machines. You can see the differences between the tiers we have available [here](https://phpfog.com/pricing). Scaling out, on the other hand, means adding servers of the same tier to your existing Cloud. 

Your decision on whether to scale up or scale out (or both!) will depend on the nature of your app, your budget considerations, and your traffic. Fortunately, PHP Fog makes scaling easy and flexible enough to let you experiment and figure out exactly what's right for you. 

###### Scale Up

Scaling up is extremely easy. If you're upgrading a Shared app, just go to your app console, click on the "Upgrade" tab on the left, choose the level you want to upgrade to, and hit the "Save Changes" button. If you're upgrading a Dedicated app, go to your Cloud console, click on the "Scaling" button, choose the level you want to upgrade to, and hit the "Save Changes" button. 

That's it! Cloud upgrades generally take a few hours, and no more than 24. 

Note: You can migrate back and forth between any level of Dedicated Cloud, but because of the more restrictive nature of Shared, once you upgrade from a Shared Cloud to a Dedicated Cloud, you cannot downgrade back to Shared. 

###### Scale Out

Scaling out is easy, too. Just go to your Cloud console, click on the "Scaling" button, drag the slider to the number of servers you want, and click the "Save Changes" button. 

That's it! Scaling to more servers generally take just a few minutes. 

Note: If your app stores any data, uploaded content, or session data on the local file system, scaling out can present a problem. Each server has its own file system, so changes made to one will not reflect on the others. To prevent this, you want to build your app in a "stateless" manner. Read on to learn more.

### Stateless Architecture

When your app runs on multiple servers, each server is a completely separate virtual machine with no shared file system, and PHP Fog's load balancers distribute HTTP requests across those servers. This means you have to assume that any two requests will go to different servers.

So you'll want to:

* Store static data and assets in external storage, e.g. Amazon's S3. Read more in our [Storage guide](/best-practices/storage).
* Store cookie and session data in the database. 

And optionally: 

* Set up your own memcached server on Amazon's EC2 service (in the US-East region). 
